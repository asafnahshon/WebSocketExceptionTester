// This code was generated by ChatGPT, OpenAI's language model.

// prompt: dotnet tester console application, simulate exception: System.Net.WebSockets.WebSocketException (0x80004005): Unable to connect to the remote server
// ---> System.Net.Http.HttpRequestException: The SSL connection could not be established, see inner exception.
// * handle custom command-line argument for custom url * print CN and/or SAN * handle websockets by passing the famous Upgrade header.
// * handle common exceptions, but print all of them.

using System;
using System.Net.Http;
using System.Security.Cryptography.X509Certificates;
using System.Net.Security;
using System.Threading.Tasks;
using System.Linq;

namespace WebSocketExceptionTester
{
    class Program
    {
        static async Task Main(string[] args)
        {
            // Parse command-line arguments
            string url = "https://testurl.defaulturl.com"; // Default URL - edited
            if (args.Length > 0)
            {
                for (int i = 0; i < args.Length; i++)
                {
                    if (args[i] == "--url" && i + 1 < args.Length)
                    {
                        url = args[i + 1];
                    }
                }
            }

            Console.WriteLine($"Connecting to URL: {url}");

            try
            {
                // Set up custom HttpClient handler with certificate validation
                var handler = new HttpClientHandler
                {
                    // Use a custom certificate validation callback
                    ServerCertificateCustomValidationCallback = (sender, cert, chain, sslPolicyErrors) =>
                    {
                        // Print certificate details before connecting
                        PrintCertificateDetails(cert);

                        // If there are no SSL policy errors, allow the connection
                        if (sslPolicyErrors == SslPolicyErrors.None)
                        {
                            Console.WriteLine("Certificate is valid. Proceeding with the connection...");
                            return true; // Allow the certificate
                        }

                        // Reject certificate if there are any policy errors (e.g., expired, untrusted root, etc.)
                        Console.WriteLine($"Certificate validation failed: {sslPolicyErrors}");
                        return false; // Reject the certificate
                    }
                };

                using (var client = new HttpClient(handler))
                {
                    // Add the 'Upgrade' header to the request
                    client.DefaultRequestHeaders.Add("Upgrade", "websocket");
                    client.DefaultRequestHeaders.Add("Connection", "Upgrade");

                    // Make the request and try to establish a connection
                    Console.WriteLine("Attempting to connect...");
                    var response = await client.GetAsync(url);

                    // Check if the response status code is 426
                    if (response.StatusCode == System.Net.HttpStatusCode.UpgradeRequired)
                    {
                        Console.WriteLine("Server requires an Upgrade header.");
                    }
                    else
                    {
                        response.EnsureSuccessStatusCode();
                        // Print server response content if connection is successful
                        Console.WriteLine("Connection successful!");
                        string responseBody = await response.Content.ReadAsStringAsync();
                        Console.WriteLine("Response from server:");
                        Console.WriteLine(responseBody);
                    }
                }
            }
            catch (HttpRequestException ex)
            {
                // Print full exception details
                Console.WriteLine("HttpRequestException: " + ex.ToString());
            }
            catch (System.Security.Authentication.AuthenticationException ex)
            {
                // Catch SSL/TLS related errors (rejected certificate)
                Console.WriteLine("AuthenticationException: " + ex.ToString());
            }
            catch (Exception ex)
            {
                // General exception handler
                Console.WriteLine("General Exception: " + ex.ToString());
            }
        }

        // Method to print certificate details like CN and SAN
        private static void PrintCertificateDetails(X509Certificate2 cert)
        {
            if (cert != null)
            {
                // Print the Common Name (CN) from the certificate
                var cn = cert.GetNameInfo(X509NameType.SimpleName, false);
                Console.WriteLine("Certificate CN: " + cn);

                // Print the Subject Alternative Names (SAN) if available
                var sanExtension = cert.Extensions.OfType<X509Extension>()
                    .FirstOrDefault(ext => ext.Oid.FriendlyName == "Subject Alternative Name");

                if (sanExtension != null)
                {
                    var san = sanExtension.Format(true);
                    Console.WriteLine("Certificate SAN: " + san);
                }
                else
                {
                    Console.WriteLine("No SAN found in the certificate.");
                }
            }
            else
            {
                Console.WriteLine("No certificate information available.");
            }
        }
    }
}
